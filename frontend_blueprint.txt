# UMaT Adaptive Learning Analytics Platform
## Complete Development Blueprint

### Project Overview
An analytics web application for the UMaT (University of Mines and Technology) adaptive learning Telegram bot. The platform features a public transparency dashboard and a comprehensive admin interface, hosted at **askthe.dev** with modern green-themed design and micro-animations.

---

## Architecture Overview

### Tech Stack
- **Frontend**: Next.js (React) deployed on Vercel
- **Backend API**: FastAPI running on existing EC2 instance  
- **Database**: Existing PostgreSQL database (shared with Telegram bot)
- **Styling**: Tailwind CSS with custom green theme
- **Charts**: Recharts for data visualization
- **Domain**: askthe.dev

### System Architecture
```
Frontend (Vercel) ↔ FastAPI (EC2) ↔ PostgreSQL (EC2)
     ↑                    ↑               ↑
  askthe.dev         /api/v1/*     Shared with Bot
```

---

## Design System

### Color Palette (Modern Green Theme)
- **Forest Green**: `#0D4F3C` (primary, headers, navigation)
- **Emerald**: `#10B981` (success states, positive metrics)
- **Sage**: `#6EE7B7` (accents, hover states)
- **Mint**: `#A7F3D0` (light backgrounds, subtle highlights)
- **Charcoal**: `#111827` (dark mode backgrounds)
- **Slate**: `#374151` (secondary text, borders)
- **Pearl White**: `#F9FAFB` (light backgrounds)
- **Amber Warning**: `#F59E0B` (alerts, attention needed)
- **Cool Blue**: `#3B82F6` (links, secondary actions)
- **Rose**: `#EF4444` (critical errors only)

### Visual Design Principles
- **Glassmorphism effects** with green tints
- **Rounded corners** (8px-16px radius)
- **Card-based layouts** with subtle shadows
- **Micro-animations** throughout
- **Mobile-first responsive design**
- **Accessibility-compliant** contrast ratios

---

## Frontend Structure (Next.js on Vercel)

### Project Structure
```
/
├── pages/
│   ├── index.js                 # Public dashboard
│   ├── admin/
│   │   ├── index.js            # Admin dashboard
│   │   ├── students/           # Student analytics
│   │   ├── courses/            # Course performance  
│   │   ├── bot-intelligence/   # AI metrics
│   │   └── settings/           # Admin management
├── components/
│   ├── public/                 # Public dashboard components
│   ├── admin/                  # Admin-only components
│   ├── charts/                 # Reusable chart components
│   └── ui/                     # Base UI components
├── lib/
│   ├── api.js                  # API client functions
│   ├── auth.js                 # Simple auth logic
│   └── utils.js                # Helper functions
├── styles/
│   └── globals.css             # Tailwind + custom styles
└── public/
    └── animations/             # Lottie animation files
```

### Key Pages

#### Public Dashboard (`/`)
- **Hero Section**: Real-time UMaT learning statistics
- **Learning Adaptation Insights**: How the bot adjusts difficulty
- **Knowledge Growth Trends**: Anonymous subject mastery over time
- **Bot Intelligence Metrics**: Algorithm performance showcase
- **UMaT Community Impact**: Regional success stories

#### Admin Dashboard (`/admin`)
- **Authentication**: Simple login form (creator hardcoded access)
- **UMaT Rollout Command Center**: Level 100 performance overview
- **Adaptive Learning Intelligence**: Bot AI metrics
- **Curriculum Performance**: Course-specific analytics
- **Student Journey Analytics**: Individual learning paths
- **UMaT Community Insights**: Campus-specific data

### Authentication System (Simplified)
Since we're not using Telegram OAuth initially:

```javascript
// lib/auth.js
const CREATOR_CREDENTIALS = {
  username: process.env.NEXT_PUBLIC_CREATOR_USERNAME,
  password: process.env.CREATOR_PASSWORD // Server-side only
};

// Simple session-based auth
export function authenticateUser(credentials) {
  // Validate against creator credentials or sub-admin list
  // Store session in localStorage/sessionStorage
  // Return auth status
}
```

### Micro-Animations & Transitions

#### Loading States
```css
/* Organic growth animation */
@keyframes grow-organic {
  0% { transform: scale(0) rotate(-3deg); opacity: 0; }
  50% { transform: scale(1.05) rotate(1deg); opacity: 0.8; }
  100% { transform: scale(1) rotate(0deg); opacity: 1; }
}

/* Leaf sprouting effect */
.card-enter {
  animation: grow-organic 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}
```

#### Interactive Elements
- **Hover Effects**: Gentle green glow and lift
- **Button Morphing**: Shape changes on different states  
- **Progress Animations**: Smooth filling effects
- **Chart Reveals**: Staggered data point animations
- **Success Feedback**: Growing checkmarks and confetti

---

## Backend API (FastAPI on EC2)

### API Structure
```python
# main.py
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_database_url
from src.models.models import *  # Import existing bot models
from src.database import get_db  # Reuse existing database connection

app = FastAPI(title="UMaT Analytics API", version="1.0.0")

# CORS for Vercel frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://askthe.dev", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)
```

### Required API Endpoints

#### Public Endpoints
```python
@app.get("/api/v1/public/overview")
async def get_public_overview(db: Session = Depends(get_db)):
    """Public dashboard KPIs - anonymized"""
    return {
        "total_students": get_total_users_count(db),
        "total_questions_answered": get_total_questions_answered(db),
        "courses_available": get_courses_count(db),
        "average_improvement": get_anonymous_improvement_rate(db),
        "peak_learning_hours": get_peak_usage_times(db)
    }

@app.get("/api/v1/public/course-performance")
async def get_public_course_performance(db: Session = Depends(get_db)):
    """Anonymous course difficulty and popularity"""
    return get_course_performance_public(db)

@app.get("/api/v1/public/learning-trends")
async def get_learning_trends(db: Session = Depends(get_db)):
    """Weekly/monthly learning patterns"""
    return get_aggregated_learning_trends(db)
```

#### Admin Endpoints (Protected)
```python
@app.get("/api/v1/admin/dashboard")
async def get_admin_dashboard(db: Session = Depends(get_db), 
                            current_user = Depends(verify_admin)):
    """Complete admin dashboard metrics"""
    return {
        "umat_overview": get_umat_specific_metrics(db),
        "active_students": get_active_students_detailed(db),
        "course_performance": get_detailed_course_analytics(db),
        "bot_intelligence": get_adaptation_metrics(db),
        "recent_alerts": get_system_alerts(db)
    }

@app.get("/api/v1/admin/students")
async def get_students_analytics(skip: int = 0, limit: int = 100,
                               db: Session = Depends(get_db)):
    """Paginated student analytics"""
    return get_students_with_performance(db, skip, limit)

@app.get("/api/v1/admin/students/{user_id}")
async def get_student_detail(user_id: int, db: Session = Depends(get_db)):
    """Individual student performance analysis"""
    return get_detailed_student_analytics(db, user_id)

@app.get("/api/v1/admin/courses/{course_id}/performance")
async def get_course_detailed_performance(course_id: int, 
                                        db: Session = Depends(get_db)):
    """Deep dive into course performance"""
    return get_course_question_analytics(db, course_id)

@app.get("/api/v1/admin/bot-intelligence")
async def get_bot_intelligence_metrics(db: Session = Depends(get_db)):
    """AI adaptation and learning algorithm performance"""
    return {
        "adaptation_success_rate": calculate_adaptation_success(db),
        "learning_velocity_by_program": get_program_learning_velocity(db),
        "difficulty_calibration": get_difficulty_calibration_metrics(db),
        "student_frustration_detection": get_frustration_metrics(db)
    }
```

### Database Schema Updates
Add these tables to your existing schema:

```sql
-- For admin management
CREATE TABLE admins (
    id SERIAL PRIMARY KEY,
    telegram_id BIGINT UNIQUE,
    username VARCHAR(255),
    role VARCHAR(50) DEFAULT 'admin', -- 'creator', 'admin', 'viewer'
    created_by INTEGER REFERENCES admins(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE
);

-- Insert creator admin (your Telegram ID)
INSERT INTO admins (telegram_id, username, role) 
VALUES (YOUR_TELEGRAM_ID, 'creator', 'creator');

-- For question reporting (future feature)
CREATE TABLE question_reports (
    id SERIAL PRIMARY KEY,
    question_id INTEGER NOT NULL REFERENCES questions(id),
    user_id INTEGER NOT NULL REFERENCES users(id),
    reason TEXT,
    status VARCHAR(20) DEFAULT 'open',
    reported_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add created_at to existing users table
ALTER TABLE users ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- For tracking detailed analytics
CREATE TABLE user_sessions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    session_start TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    session_end TIMESTAMP WITH TIME ZONE,
    questions_attempted INTEGER DEFAULT 0,
    session_type VARCHAR(50) -- 'study', 'exam_prep', 'review'
);
```

### Key Analytics Functions

```python
# analytics/umat_metrics.py
def get_umat_specific_metrics(db: Session):
    """UMaT Level 100 specific performance metrics"""
    return {
        "active_level_100_students": get_active_students_count(db),
        "program_breakdown": get_performance_by_program(db),
        "retention_rate": calculate_30_day_retention(db),
        "study_session_length": get_average_session_length(db),
        "peak_usage_hours": get_campus_peak_hours(db)
    }

def calculate_adaptation_success(db: Session):
    """Measure how well the bot adapts to student ability"""
    # Compare predicted difficulty vs actual performance
    # Return success percentage
    
def get_learning_velocity_by_program(db: Session):
    """How fast students in different programs learn"""
    # Engineering, Mining, etc. learning speed comparison
    
def detect_learning_plateaus(db: Session):
    """Identify when students stop progressing"""
    # Flag students who haven't improved in X days
```

---

## Deployment Guide

### EC2 Backend Setup

#### 1. Install FastAPI Dependencies
```bash
# In your existing EC2 instance
pip install fastapi uvicorn python-multipart

# If using async database operations
pip install databases asyncpg
```

#### 2. Run FastAPI Server
```bash
# Add to your startup script or systemd service
uvicorn analytics_api.main:app --host 0.0.0.0 --port 8001 --reload

# Or use gunicorn for production
gunicorn analytics_api.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8001
```

#### 3. Nginx Configuration
```nginx
# Add to your existing nginx config
server {
    server_name askthe.dev;
    
    location /api/ {
        proxy_pass http://localhost:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Existing Telegram bot webhook can stay on different path
    location /webhook {
        proxy_pass http://localhost:8000;  # Your bot port
        # ... existing webhook config
    }
}
```

### Vercel Frontend Deployment

#### 1. Environment Variables
```bash
# .env.local (for development)
NEXT_PUBLIC_API_URL=https://askthe.dev/api/v1
CREATOR_USERNAME=your_username
CREATOR_PASSWORD=your_secure_password

# In Vercel dashboard, add:
NEXT_PUBLIC_API_URL=https://askthe.dev/api/v1
CREATOR_PASSWORD=your_secure_password
```

#### 2. Vercel Configuration
```json
// vercel.json
{
  "functions": {
    "pages/api/**/*.js": {
      "maxDuration": 30
    }
  },
  "rewrites": [
    {
      "source": "/api/:path*",
      "destination": "https://askthe.dev/api/:path*"
    }
  ]
}
```

#### 3. Deployment Commands
```bash
# Install Vercel CLI
npm i -g vercel

# Deploy
vercel --prod

# Domain setup (if not done)
vercel domains add askthe.dev
vercel alias set your-deployment-url.vercel.app askthe.dev
```

---

## Development Workflow

### Phase 1: MVP (2-3 weeks)
1. **Backend API Setup** (Week 1)
   - Basic FastAPI structure
   - Database connection to existing schema  
   - Core public and admin endpoints
   - Simple authentication

2. **Frontend Foundation** (Week 2)
   - Next.js project setup with green theme
   - Basic public dashboard
   - Admin login and main dashboard
   - Responsive design implementation

3. **Integration & Polish** (Week 3)
   - API integration
   - Basic animations and transitions
   - Testing and bug fixes
   - Deployment setup

### Phase 2: Advanced Features (3-4 weeks)
- Advanced analytics and reporting
- Sophisticated micro-animations
- Admin user management
- Performance optimizations
- Mobile app considerations

### Phase 3: Scale Preparation (Ongoing)
- Telegram OAuth integration
- Multi-university preparation
- Advanced AI metrics
- Real-time features

---

## Security Considerations

### API Security
- **Rate limiting** on all endpoints
- **CORS** properly configured for askthe.dev
- **Input validation** on all parameters
- **SQL injection prevention** (using SQLAlchemy ORM)
- **Sensitive data filtering** in public endpoints

### Authentication
- **Environment variable protection** for creator credentials
- **Session timeout** implementation  
- **Admin role validation** on protected routes
- **HTTPS enforcement** on production

### Data Privacy
- **Anonymization** of all public data
- **GDPR compliance** considerations
- **Student data protection** protocols
- **Audit logging** for admin actions

---

## Monitoring & Maintenance

### Performance Monitoring
- **API response times** tracking
- **Database query optimization** 
- **Frontend bundle size** monitoring
- **User experience metrics**

### Error Handling
- **Comprehensive logging** system
- **Graceful error boundaries** in React
- **API error responses** standardization
- **Monitoring alerts** setup

### Backup & Recovery
- **Database backup** strategy
- **API configuration** version control
- **Frontend deployment** rollback procedures
- **Environment variables** backup

---

This blueprint provides a complete roadmap for building your UMaT adaptive learning analytics platform. The modular approach allows for iterative development while maintaining the flexibility to scale as your bot expands to other universities.