"""Change Question.correct_answer to Integer

Revision ID: 92fa315c14e
Revises: d5260d5f095b
Create Date: 2025-08-18 08:24:50.850514

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '92fa315c14e'
down_revision: Union[str, Sequence[str], None] = 'd5260d5f095b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('questions', schema=None) as batch_op:
        # Add a new temporary column to hold the integer value
        batch_op.add_column(sa.Column('correct_answer_int', sa.Integer(), nullable=True))

    # Update the new column with the integer value of the old column
    # This will only update rows where correct_answer is a valid number
    op.execute("UPDATE questions SET correct_answer_int = CAST(correct_answer AS INTEGER) WHERE correct_answer ~ '^[0-9]+$'")

    with op.batch_alter_table('questions', schema=None) as batch_op:
        # Drop the old string column
        batch_op.drop_column('correct_answer')
        # Rename the new integer column to the original name
        batch_op.alter_column('correct_answer_int', new_column_name='correct_answer', existing_type=sa.Integer(), nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('questions', schema=None) as batch_op:
        batch_op.alter_column('correct_answer',
               existing_type=sa.Integer(),
               type_=sa.String(),
               existing_nullable=False)
    # ### end Alembic commands ###