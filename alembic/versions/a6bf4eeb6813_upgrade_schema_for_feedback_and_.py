"""Upgrade schema for feedback and adaptive learning features

Revision ID: a6bf4eeb6813
Revises: e1f3f3e3d3a0
Create Date: 2025-08-31 14:02:13.117195

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a6bf4eeb6813'
down_revision: Union[str, Sequence[str], None] = 'e1f3f3e3d3a0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('feedback',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('feedback_type', sa.String(length=50), nullable=False),
    sa.Column('text_content', sa.String(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('is_withdrawn', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('courses', sa.Column('min_difficulty', sa.Float(), nullable=True))
    op.add_column('courses', sa.Column('max_difficulty', sa.Float(), nullable=True))
    op.add_column('quiz_sessions', sa.Column('status', sa.String(length=50), nullable=True))
    op.add_column('quiz_sessions', sa.Column('initial_user_skill_level', sa.Float(), nullable=True))
    
    # Data migration: Populate 'status' from 'is_completed'
    op.execute("""
        UPDATE quiz_sessions
        SET status = CASE
            WHEN is_completed = TRUE THEN 'completed'
            ELSE 'in_progress'
        END
    """)
    
    # Now that data is migrated, make the new column non-nullable
    op.alter_column('quiz_sessions', 'status', nullable=False)
    
    op.drop_column('quiz_sessions', 'is_completed')
    op.add_column('quiz_session_questions', sa.Column('selection_metadata', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.add_column('quiz_session_questions', sa.Column('is_reported', sa.Boolean(), nullable=True))
    op.execute("UPDATE quiz_session_questions SET is_reported = false")
    op.alter_column('quiz_session_questions', 'is_reported', nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('quiz_session_questions', 'is_reported')
    op.drop_column('quiz_session_questions', 'selection_metadata')
    op.add_column('quiz_sessions', sa.Column('is_completed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    
    # Data migration: Populate 'is_completed' from 'status'
    op.execute("""
        UPDATE quiz_sessions
        SET is_completed = CASE
            WHEN status = 'completed' THEN TRUE
            ELSE FALSE
        END
    """)
    
    op.drop_column('quiz_sessions', 'initial_user_skill_level')
    op.drop_column('quiz_sessions', 'status')
    op.drop_column('courses', 'max_difficulty')
    op.drop_column('courses', 'min_difficulty')
    op.drop_table('feedback')
    # ### end Alembic commands ###